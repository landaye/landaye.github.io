{"meta":{"title":"兰大爷","subtitle":"兰大爷'S BLOG","description":"悟已往之不谏,知来者之可追","author":"兰大爷","url":"https://landaye.github.io","root":"/"},"pages":[{"title":"五湖四海皆是朋友!","date":"2024-07-31T03:44:03.828Z","updated":"2024-07-31T03:44:03.828Z","comments":true,"path":"friends/index.html","permalink":"https://landaye.github.io/friends/index.html","excerpt":"","text":"Contact Me"},{"title":"categories","date":"2024-07-30T01:06:49.559Z","updated":"2024-07-30T01:06:49.559Z","comments":true,"path":"categories/index.html","permalink":"https://landaye.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-07-30T04:22:15.000Z","updated":"2024-08-03T08:03:55.986Z","comments":true,"path":"about/index.html","permalink":"https://landaye.github.io/about/index.html","excerpt":"","text":""},{"title":"安居","date":"2024-08-03T14:13:16.842Z","updated":"2024-08-03T14:13:16.842Z","comments":true,"path":"projects/anju.html","permalink":"https://landaye.github.io/projects/anju.html","excerpt":"","text":""},{"title":"search","date":"2024-07-30T04:14:19.000Z","updated":"2024-07-30T04:15:07.512Z","comments":true,"path":"search/index.html","permalink":"https://landaye.github.io/search/index.html","excerpt":"","text":""},{"title":"项目","date":"2024-07-31T11:09:31.199Z","updated":"2024-07-31T11:09:31.199Z","comments":true,"path":"projects/index.html","permalink":"https://landaye.github.io/projects/index.html","excerpt":"","text":""},{"title":"阿星商城","date":"2024-08-03T14:11:36.933Z","updated":"2024-08-03T14:11:36.933Z","comments":true,"path":"projects/axing.html","permalink":"https://landaye.github.io/projects/axing.html","excerpt":"","text":""}],"posts":[{"title":"REACT","slug":"我的学习","date":"2024-07-30T05:46:58.145Z","updated":"2024-07-30T01:31:49.561Z","comments":true,"path":"2024/07/30/我的学习/","permalink":"https://landaye.github.io/2024/07/30/%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"文章内容 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"前端","slug":"前端","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"REACT","slug":"前端/REACT","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/REACT/"}],"tags":[]},{"title":"VUE","slug":"vue","date":"2024-07-30T05:46:58.143Z","updated":"2024-08-04T05:05:38.671Z","comments":true,"path":"2024/07/30/vue/","permalink":"https://landaye.github.io/2024/07/30/vue/","excerpt":"","text":"VUE 渐进式 JavaScript 框架易学易用，性能出色，适用场景丰富的 Web 前端框架。 Vue 的两个核心功能： 声明式渲染：Vue 基于标准 HTML 拓展了一套模板语法，使得可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。 响应性：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM . 说说你对 vue 的理解 渐进式框架 组件化 响应式系统 虚拟DOM 单文件组件 (SFC) Vue CLI Vue Router 和 Vuex . 你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢？ 单页应用（Single Page Application, SPA）是一种Web应用程序，初次加载所需资源加载到浏览器中。通过JavaScript动态更新页面内容。通过发送网络请求和路由来实现数据获取和页面的导航。 优:用户体验好、快，内容的改变不需要重新加载整个页面。具有桌面应用的即时性、网站的可移植性和可访问性。良好的前后端分离，分工更明确。 缺:SEO不友好，不利于搜索引擎的抓取。首次渲染速度相对较慢。 实现SPA:HTML结构：定义页面的基本结构。路由功能：实现一个简单的路由系统，根据URL路径动态加载不同的内容。内容更新：根据当前路由加载相应的内容。事件监听：监听用户的导航行为（例如点击链接）并触发路由更新。 . 如何给SPA做SEO？ SSR服务端渲染将组件或页面通过服务器生成html，再返回给浏览器，如Vue.js–&gt;Nuxt.js React–&gt;Next.js 静态化（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中（2）通过WEB服务器的 URL Rewrite的方式，把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。 使用Phantomjs针对爬虫处理 . 请描述下你对vue生命周期的理解？ beforeCreate 插件开发中执行一些初始化任务 created 用于异步数据获取 beforeMount 未执行渲染、更新，dom未创建 mounted 用于获取访问数据和dom元素 beforeUpdate 用于获取更新前各种状态 updated 更新后，所有状态已是最新 beforeDestroy 用于一些定时器或订阅的取消 destroyed 组件已销毁，作用同上 . 说说你对keep-alive的理解是什么？缓存后如何获取数据? 设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（activated与deactivated）：首次：beforeRouteEnter &gt; beforeCreate &gt; created&gt; mounted &gt; activated &gt; … … &gt; beforeRouteLeave &gt; deactivated再次：beforeRouteEnter &gt;activated &gt; … … &gt; beforeRouteLeave &gt; deactivated 获取数据：beforeRouteEnteractived注意：服务器端渲染期间avtived不被调用 . 在created和mounted这两个生命周期中请求数据有什么区别呢？created是在组件实例一旦创建完成的时候立刻调用，页面dom节点并未生成；mounted是在页面dom节点渲染完毕之后就立刻执行的。都能拿到实例对象的属性和方法。放在mounted中的请求有可能导致页面闪动（因为此时页面dom结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。建议对页面内容的改动放在created生命周期当中。 . v-if和v-for的优先级是什么？v-for与v-if作用在不同标签时候，是先进行判断，再进行列表的渲染同一标签进行if判断的时候，v-for是比v-if先进行判断，v-for优先级比v-if高 永远不要把 v-if 和 v-for 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断） . Vue组件之间的通信方式都有哪些？vue中8种常规的通信方案 通过 props 传递 父–&gt;子 通过 $emit 触发自定义事件 子–&gt;父子组件通过$emit触发自定义事件，$emit第二个参数为传递的数值父组件绑定监听器获取到子组件传递过来的参数 使用 ref 子–&gt;父 通过获取dom元素传值 EventBus 兄–&gt;兄 $parent 或$root 兄–&gt;兄 通过共同祖辈$parent或者$root搭建通信桥连 attrs 与 listeners 祖–&gt;孙 Provide 与 Inject 祖–&gt;孙在祖先组件定义provide属性，返回传递的值在后代组件通过inject接收组件传递过来的值 Vuex –&gt;复杂关系的组件数据传递Vuex作用相当于一个用来存储共享变量的容器 . VueX state用来存放共享变量的地方 getter，可以增加一个getter派生状态，(相当于store中的计算属性），用来获得共享变量的值 mutations用来存放修改state的方法。 actions也是用来存放修改state的方法，不过action是在mutations的基础上进行。常用来做一些异步操作 . Vue中的$nextTick有什么作用？&#36;nextTick的主要作用是延迟执行某些代码，直到 Vue 完成更新 DOM。用于在数据变化引发的 DOM 更新完成后执行延迟回调。 . 你了解vue的diff算法吗？说说看？ diff 算法是一种通过同层的树节点进行比较的高效算法diff整体策略为：深度优先，同层比较 两个特点：比较只会在同层级进行, 不会跨层级比较在diff比较的过程中，循环从两边向中间比较 render 函数render 函数是 Vue 组件中的一个方法，用于描述组件的视图结构。它返回一个虚拟 DOM 节点树 (VNode)，Vue 根据这个虚拟 DOM 树来更新真实 DOM。 h 函数h 函数（也称为 createElement 函数）是用于创建虚拟 DOM 节点的工具。它是 render 函数的主要构建工具，用于生成虚拟 DOM 树。 patch 函数patch 函数是虚拟 DOM 操作的核心，用于比较新旧虚拟 DOM 树，并将变化应用到真实 DOM 上。它是 Vue 内部的一个重要机制，确保视图更新的高效性。 . Vue项目中有封装过axios吗？主要是封装哪方面的？ 设置接口请求前缀利用node环境变量来作判断，用来区分开发、测试、生产环境在本地调试的时候，还需要在vue.config.js文件中配置devServer实现代理转发，从而实现跨域 设置请求头与超时时间 封装请求方法先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去 请求拦截器请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便 响应拦截器响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权 . Vue项目中你是如何解决跨域的呢？ JSONP (JSON with Padding)JSONP 是一种通过 &lt;script&gt; 标签实现跨域请求的方法。它只能用于 GET 请求。 CORS (Cross-Origin Resource Sharing)CORS 是一种 W3C 标准，它允许服务器通过 HTTP 头来指示哪些来源站点可以访问该服务器的资源。服务器需要配置相应的响应头： 代理服务器通过设置代理服务器，可以让前端向同源的代理服务器发送请求，再由代理服务器向目标服务器发送请求，代理服务器接收到响应后再返回给前端。 Nginx 反向代理使用 Nginx 配置反向代理，将请求代理到目标服务器。 使用 HTML5 的 iframe 和 postMessage通过在父页面和子页面之间使用 iframe 和 postMessage 来实现跨域通信。","categories":[{"name":"前端","slug":"前端","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"VUE","slug":"前端/VUE","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/VUE/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-07-30T07:30:00.000Z","updated":"2024-08-04T02:10:08.798Z","comments":true,"path":"2023/07/30/hello-world/","permalink":"https://landaye.github.io/2023/07/30/hello-world/","excerpt":"","text":"文章内容 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start See the Pen Untitled by . (@LanDaye) on CodePen. 点击 这里 编辑和查看完整代码。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://landaye.github.io/categories/%E6%9D%82%E8%B0%88/"}],"tags":[]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"REACT","slug":"前端/REACT","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/REACT/"},{"name":"VUE","slug":"前端/VUE","permalink":"https://landaye.github.io/categories/%E5%89%8D%E7%AB%AF/VUE/"},{"name":"杂谈","slug":"杂谈","permalink":"https://landaye.github.io/categories/%E6%9D%82%E8%B0%88/"}],"tags":[]}