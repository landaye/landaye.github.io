[{"title":"Vue","url":"https://landaye.github.io/2024/07/31/Vue/","content":"<h1 id=\"文章内容\"><a href=\"#文章内容\" class=\"headerlink\" title=\"文章内容\"></a>文章内容</h1><hr>\n<p>渐进式 JavaScript 框架易学易用，性能出色，适用场景丰富的 Web 前端框架。</p>\n<p> Vue 的两个核心功能：</p>\n<ul>\n<li><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</li>\n<li><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM</li>\n</ul>\n<h2 id=\"说说你对-vue-的理解\"><a href=\"#说说你对-vue-的理解\" class=\"headerlink\" title=\". 说说你对 vue 的理解\"></a>. 说说你对 vue 的理解</h2><p>Vue 是一个渐进式的 JavaScript 框架，通过响应式数据绑定、组件化系统、虚拟 DOM、高效的状态管理以及丰富的生态系统，帮助开发者灵活且高效地构建用户界面。</p>\n<ol>\n<li>渐进式框架</li>\n<li>组件化</li>\n<li>响应式系统</li>\n<li>虚拟DOM</li>\n<li>单文件组件 (SFC)</li>\n<li>Vue CLI</li>\n<li>Vue Router 和 Vuex</li>\n</ol>\n<h2 id=\"你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢？\"><a href=\"#你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢？\" class=\"headerlink\" title=\". 你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢？\"></a>. 你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢？</h2><ol>\n<li>单页应用（Single Page Application, SPA）是一种Web应用程序，初次加载所需资源加载到浏览器中。通过JavaScript动态更新页面内容。通过发送网络请求和路由来实现数据获取和页面的导航。</li>\n<li>优:<br>用户体验好、快，内容的改变不需要重新加载整个页面。<br>代码复用性高。<br>良好的前后端分离，分工更明确。</li>\n<li>缺:<br>SEO不友好，不利于搜索引擎的抓取。<br>首次渲染速度相对较慢。</li>\n<li>实现SPA:<br>HTML结构：定义页面的基本结构。<br>路由功能：实现一个简单的路由系统，根据URL路径动态加载不同的内容。<br>内容更新：根据当前路由加载相应的内容。<br>事件监听：监听用户的导航行为（例如点击链接）并触发路由更新。</li>\n</ol>\n<h2 id=\"如何给SPA做SEO？\"><a href=\"#如何给SPA做SEO？\" class=\"headerlink\" title=\". 如何给SPA做SEO？\"></a>. 如何给SPA做SEO？</h2><ol>\n<li>SSR服务端渲染<br>将组件或页面通过服务器生成html，再返回给浏览器，如Vue.js–&gt;Nuxt.js  React–&gt;Next.js</li>\n<li>静态化<br>（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中<br>（2）通过WEB服务器的 URL Rewrite的方式，把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。</li>\n<li>使用工具针对爬虫处理，判断是否是搜索引擎，然后动态生成静态HTML页面返回给搜索引擎</li>\n</ol>\n<h2 id=\"请描述下你对vue生命周期的理解？\"><a href=\"#请描述下你对vue生命周期的理解？\" class=\"headerlink\" title=\". 请描述下你对vue生命周期的理解？\"></a>. 请描述下你对vue生命周期的理解？</h2><p><img src=\"/../../images/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"Cover Image Description\"></p>\n<ol>\n<li>beforeCreate     插件开发中执行一些初始化任务</li>\n<li>created\t        用于异步数据获取</li>\n<li>beforeMount\t    未执行渲染、更新，dom未创建</li>\n<li>mounted\t        用于获取访问数据和dom元素</li>\n<li>beforeUpdate     用于获取更新前各种状态</li>\n<li>updated\t        更新后，所有状态已是最新</li>\n<li>beforeDestroy\t  用于一些定时器或订阅的取消</li>\n<li>destroyed\t      组件已销毁，作用同上</li>\n</ol>\n<h2 id=\"说说你对keep-alive的理解是什么？缓存后如何获取数据\"><a href=\"#说说你对keep-alive的理解是什么？缓存后如何获取数据\" class=\"headerlink\" title=\". 说说你对keep-alive的理解是什么？缓存后如何获取数据?\"></a>. 说说你对keep-alive的理解是什么？缓存后如何获取数据?</h2><ol>\n<li><p>设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（activated与deactivated）：<br>首次：beforeRouteEnter &gt; beforeCreate &gt; created&gt; mounted &gt; activated &gt; … … &gt; beforeRouteLeave &gt; deactivated<br>再次：beforeRouteEnter &gt;activated &gt; … … &gt; beforeRouteLeave &gt; deactivated</p>\n</li>\n<li><p>获取数据：<br>beforeRouteEnter<br>actived<br>注意：服务器端渲染期间avtived不被调用</p>\n</li>\n</ol>\n<h2 id=\"在created和mounted这两个生命周期中请求数据有什么区别呢？\"><a href=\"#在created和mounted这两个生命周期中请求数据有什么区别呢？\" class=\"headerlink\" title=\". 在created和mounted这两个生命周期中请求数据有什么区别呢？\"></a>. 在created和mounted这两个生命周期中请求数据有什么区别呢？</h2><p>created是在组件实例一旦创建完成的时候立刻调用，页面dom节点并未生成；mounted是在页面dom节点渲染完毕之后就立刻执行的。都能拿到实例对象的属性和方法。放在mounted中的请求有可能导致页面闪动（因为此时页面dom结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。建议对页面内容的改动放在created生命周期当中。</p>\n<h2 id=\"v-if和v-for的优先级是什么？\"><a href=\"#v-if和v-for的优先级是什么？\" class=\"headerlink\" title=\". v-if和v-for的优先级是什么？\"></a>. v-if和v-for的优先级是什么？</h2><p>v-for与v-if作用在不同标签时候，是先进行判断，再进行列表的渲染<br>同一标签进行if判断的时候，v-for是比v-if先进行判断，v-for优先级比v-if高</p>\n<p>永远不要把 v-if 和 v-for 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）</p>\n<h2 id=\"Vue组件之间的通信方式都有哪些？\"><a href=\"#Vue组件之间的通信方式都有哪些？\" class=\"headerlink\" title=\". Vue组件之间的通信方式都有哪些？\"></a>. Vue组件之间的通信方式都有哪些？</h2><p>vue中8种常规的通信方案</p>\n<ol>\n<li>通过 props 传递  父–&gt;子</li>\n<li>通过 $emit 触发自定义事件   子–&gt;父<br>子组件通过$emit触发自定义事件，$emit第二个参数为传递的数值<br>父组件绑定监听器获取到子组件传递过来的参数</li>\n<li>使用 ref   子–&gt;父   通过获取dom元素传值</li>\n<li>EventBus   兄–&gt;兄</li>\n<li>$parent 或$root   兄–&gt;兄     通过共同祖辈$parent或者$root搭建通信桥连</li>\n<li>attrs 与 listeners   祖–&gt;孙  </li>\n<li>Provide 与 Inject    祖–&gt;孙<br>在祖先组件定义provide属性，返回传递的值<br>在后代组件通过inject接收组件传递过来的值</li>\n<li>Vuex  –&gt;复杂关系的组件数据传递<br>Vuex作用相当于一个用来存储共享变量的容器</li>\n</ol>\n<h2 id=\"VueX\"><a href=\"#VueX\" class=\"headerlink\" title=\".  VueX\"></a>.  VueX</h2><ol>\n<li>state用来存放共享变量的地方</li>\n<li>getter，可以增加一个getter派生状态，(相当于store中的计算属性），用来获得共享变量的值</li>\n<li>mutations用来存放修改state的方法。</li>\n<li>actions也是用来存放修改state的方法，不过action是在mutations的基础上进行。常用来做一些异步操作</li>\n</ol>\n<h2 id=\"Vue中的-nextTick有什么作用？\"><a href=\"#Vue中的-nextTick有什么作用？\" class=\"headerlink\" title=\".  Vue中的$nextTick有什么作用？\"></a>.  Vue中的$nextTick有什么作用？</h2><p>&#36;nextTick的主要作用是延迟执行某些代码，直到 Vue 完成更新 DOM。用于在数据变化引发的 DOM 更新完成后执行延迟回调。</p>\n<h2 id=\"你了解vue的diff算法吗？说说看？\"><a href=\"#你了解vue的diff算法吗？说说看？\" class=\"headerlink\" title=\".  你了解vue的diff算法吗？说说看？\"></a>.  你了解vue的diff算法吗？说说看？</h2><ol>\n<li><p>diff 算法是一种通过同层的树节点进行比较的高效算法<br>diff整体策略为：深度优先，同层比较</p>\n</li>\n<li><p>两个特点：<br>比较只会在同层级进行, 不会跨层级比较<br>在diff比较的过程中，循环从两边向中间比较</p>\n</li>\n<li><p>render 函数<br>render 函数是 Vue 组件中的一个方法，用于描述组件的视图结构。它返回一个虚拟 DOM 节点树 (VNode)，Vue 根据这个虚拟 DOM 树来更新真实 DOM。</p>\n</li>\n<li><p>h 函数<br>h 函数（也称为 createElement 函数）是用于创建虚拟 DOM 节点的工具。它是 render 函数的主要构建工具，用于生成虚拟 DOM 树。</p>\n</li>\n<li><p>patch 函数<br>patch 函数是虚拟 DOM 操作的核心，用于比较新旧虚拟 DOM 树，并将变化应用到真实 DOM 上。它是 Vue 内部的一个重要机制，确保视图更新的高效性。</p>\n</li>\n</ol>\n<h2 id=\"Vue项目中有封装过axios吗？主要是封装哪方面的？\"><a href=\"#Vue项目中有封装过axios吗？主要是封装哪方面的？\" class=\"headerlink\" title=\".  Vue项目中有封装过axios吗？主要是封装哪方面的？\"></a>.  Vue项目中有封装过axios吗？主要是封装哪方面的？</h2><ol>\n<li>设置接口请求前缀<br>利用node环境变量来作判断，用来区分开发、测试、生产环境<br>在本地调试的时候，还需要在vue.config.js文件中配置devServer实现代理转发，从而实现跨域</li>\n<li>设置请求头与超时时间</li>\n<li>封装请求方法<br>先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去</li>\n<li>请求拦截器<br>请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便</li>\n<li>响应拦截器<br>响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权</li>\n</ol>\n<h2 id=\"Vue项目中你是如何解决跨域的呢？\"><a href=\"#Vue项目中你是如何解决跨域的呢？\" class=\"headerlink\" title=\". Vue项目中你是如何解决跨域的呢？\"></a>. Vue项目中你是如何解决跨域的呢？</h2><ol>\n<li>JSONP (JSON with Padding)<br>JSONP 是一种通过 &lt;script&gt; 标签实现跨域请求的方法。它只能用于 GET 请求。</li>\n<li>CORS (Cross-Origin Resource Sharing)<br>CORS 是一种 W3C 标准，它允许服务器通过 HTTP 头来指示哪些来源站点可以访问该服务器的资源。服务器需要配置相应的响应头：</li>\n<li>代理服务器<br>通过设置代理服务器，可以让前端向同源的代理服务器发送请求，再由代理服务器向目标服务器发送请求，代理服务器接收到响应后再返回给前端。</li>\n<li>Nginx 反向代理<br>使用 Nginx 配置反向代理，将请求代理到目标服务器。</li>\n<li>使用 HTML5 的 iframe 和 postMessage<br>通过在父页面和子页面之间使用 iframe 和 postMessage 来实现跨域通信。</li>\n</ol>\n<h2 id=\"为什么data属性是一个函数而不是一个对象？\"><a href=\"#为什么data属性是一个函数而不是一个对象？\" class=\"headerlink\" title=\". 为什么data属性是一个函数而不是一个对象？\"></a>. 为什么data属性是一个函数而不是一个对象？</h2><p>在根实例下data可以是对象也可以是函数，不会产生数据污染情况，但是在组件实例下data必须为函数，为了防止多个组件实例对象之间指向同一个data，产生数据污染。而采用函数的形式，初始化Data时会将其作为工厂函数，每次调用这个函数时，它都会生成并返回一个新的对象实例。</p>\n<h2 id=\"动态给vue的data添加一个新的属性时会发生什么？怎样解决？\"><a href=\"#动态给vue的data添加一个新的属性时会发生什么？怎样解决？\" class=\"headerlink\" title=\". 动态给vue的data添加一个新的属性时会发生什么？怎样解决？\"></a>. 动态给vue的data添加一个新的属性时会发生什么？怎样解决？</h2><p>动态地给data添加一个新的属性时，该属性不会自动成为响应式属性</p>\n<ol>\n<li>使用 Vue.set 方法</li>\n<li>Object.assign()<br>当需要为对象添加多个属性时，可以用 Object.assign(target, obj1, obj2) 合并对象。target 为合并后的对象，obj1 和 obj2 为要合并的对象，当两个对象有相同的 key 时，后面的会覆盖前面的。 </li>\n<li>$forceUpdate()  重新渲染当前组件</li>\n</ol>\n<h2 id=\"双向数据绑定是什么\"><a href=\"#双向数据绑定是什么\" class=\"headerlink\" title=\". 双向数据绑定是什么\"></a>. 双向数据绑定是什么</h2><p>双向数据绑定就是把Model和View绑定，其中一个更新另一个也更新。采用MVVM分层的架构，其中数据与视图关联的核心就是ViewModel，里面通过监听器和解析器来更新数据与视图。</p>\n<h2 id=\"说说你对vue的mixin的理解，有什么应用场景？\"><a href=\"#说说你对vue的mixin的理解，有什么应用场景？\" class=\"headerlink\" title=\". 说说你对vue的mixin的理解，有什么应用场景？\"></a>. 说说你对vue的mixin的理解，有什么应用场景？</h2><p>  mixins 是一种复用代码的机制。mixins 将组件中可复用的逻辑提取到一个单独的对象中，然后可以在多个组件中引入和复用这些逻辑。</p>\n<h2 id=\"slot是什么\"><a href=\"#slot是什么\" class=\"headerlink\" title=\". slot是什么\"></a>. slot是什么</h2><p>Web组件内的一个占位符,通过占位符拓展组件，去更好地复用组件和对其做定制化处理。</p>\n<ol>\n<li>默认插槽：未命名插槽，用于插入默认内容。</li>\n<li>具名插槽：带有名称的插槽，用于在组件中插入不同部分的内容。</li>\n<li>作用域插槽：带有作用域的插槽，允许在父组件中访问子组件的属性数据。</li>\n</ol>\n<h2 id=\"Vue-observable你有了解过吗？说说看\"><a href=\"#Vue-observable你有了解过吗？说说看\" class=\"headerlink\" title=\". Vue.observable你有了解过吗？说说看\"></a>. Vue.observable你有了解过吗？说说看</h2><p>Vue.observable 是 一个用于创建响应式对象的全局 API。它允许你创建一个可以被观察的数据对象，这个对象的变化可以被 Vue 的响应式系统自动追踪，从而实现数据的双向绑定和自动更新。</p>\n<ol>\n<li>简单的状态管理</li>\n<li>非父子组件通信</li>\n<li>单文件组件间的状态共享：在单文件组件中，创建一个全局的响应式对象，可以在多个组件中使用这个对象，从而实现状态共享。</li>\n</ol>\n","categories":["面试","Vue"],"tags":[]},{"title":"Css","url":"https://landaye.github.io/2024/07/30/Css/","content":"<h1 id=\"文章内容\"><a href=\"#文章内容\" class=\"headerlink\" title=\"文章内容\"></a>文章内容</h1><hr>\n<h2 id=\"怎么理解回流跟重绘？什么场景下会触发？\"><a href=\"#怎么理解回流跟重绘？什么场景下会触发？\" class=\"headerlink\" title=\". 怎么理解回流跟重绘？什么场景下会触发？\"></a>. 怎么理解回流跟重绘？什么场景下会触发？</h2><ol>\n<li>回流：布局引擎根据各种样式计算每个盒子在页面上的大小与位置</li>\n<li>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</li>\n</ol>\n<h2 id=\"说说你对盒子模型的理解\"><a href=\"#说说你对盒子模型的理解\" class=\"headerlink\" title=\". 说说你对盒子模型的理解?\"></a>. 说说你对盒子模型的理解?</h2><p>浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）<br>一个盒子由四个部分组成：content、padding、border、margin。</p>\n<ol>\n<li>标准盒子模型：<br>width 和 height 属性只包括内容区域（content），不包括内边距、边框和外边距。<br>计算公式：元素总宽度 &#x3D; content width + padding + border + margin</li>\n<li>IE 怪异盒子模型：<br>width 和 height 属性包括内容区域、内边距和边框，但不包括外边距。<br>计算公式：元素总宽度 &#x3D; width + margin（width 已经包含了内容、内边距和边框）</li>\n</ol>\n<h2 id=\"css-选择器有哪些？优先级？哪些属性可以继承？\"><a href=\"#css-选择器有哪些？优先级？哪些属性可以继承？\" class=\"headerlink\" title=\". css 选择器有哪些？优先级？哪些属性可以继承？\"></a>. css 选择器有哪些？优先级？哪些属性可以继承？</h2><ol>\n<li>css 属性选择器常用的有：<br>id 选择器（#box），选择 id 为 box 的元素<br>类选择器（.one），选择类名为 one 的所有元素<br>标签选择器（div），选择标签为 div 的所有元素<br>后代选择器（#box div），选择 id 为 box 元素内部所有的 div 元素<br>子选择器（.one&gt;one_1），选择父元素为.one 的所有.one_1 的元素<br>相邻同胞选择器（.one+.two），选择紧接在.one 之后的所有.two 元素<br>群组选择器（div,p），选择 div、p 的所有元素</li>\n<li>内联 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器</li>\n</ol>\n<h2 id=\"css-中，有哪些方式可以隐藏页面元素？区别\"><a href=\"#css-中，有哪些方式可以隐藏页面元素？区别\" class=\"headerlink\" title=\". css 中，有哪些方式可以隐藏页面元素？区别?\"></a>. css 中，有哪些方式可以隐藏页面元素？区别?</h2><ol>\n<li>display:none</li>\n<li>visibility:hidden</li>\n<li>opacity:0</li>\n<li>设置 height、width 模型属性为 0</li>\n<li>position:absolute</li>\n<li>clip-path</li>\n</ol>\n<h2 id=\"常见的块级元素，内联元素有哪些？\"><a href=\"#常见的块级元素，内联元素有哪些？\" class=\"headerlink\" title=\". 常见的块级元素，内联元素有哪些？\"></a>. 常见的块级元素，内联元素有哪些？</h2><ol>\n<li><p>块级元素（Block Elements）<br>块级元素通常会占据其父容器的整个宽度，并且总是从新的一行开始。<br>div，p，h1，h6，ul，ol，li，section，article，header，footer，nav</p>\n</li>\n<li><p>内联元素（Inline Elements）<br>内联元素只占据它们所包含内容的宽度，不会独占一行。<br>span，a，img，strong，em，b，i，u，br，code</p>\n</li>\n</ol>\n<h2 id=\"如何实现-div-同一行显示？\"><a href=\"#如何实现-div-同一行显示？\" class=\"headerlink\" title=\". 如何实现 div 同一行显示？\"></a>. 如何实现 div 同一行显示？</h2><ol>\n<li>使用 display: inline-block</li>\n<li>使用浮动（Float）</li>\n<li>使用 Flexbox</li>\n<li>使用 CSS Grid</li>\n<li>使用 transform 和 translateX</li>\n<li>使用 position: absolute</li>\n</ol>\n<h2 id=\"介绍一下-grid-网格布局和-Flexbox-弹性盒子布局\"><a href=\"#介绍一下-grid-网格布局和-Flexbox-弹性盒子布局\" class=\"headerlink\" title=\". 介绍一下 grid 网格布局和 Flexbox 弹性盒子布局\"></a>. 介绍一下 grid 网格布局和 Flexbox 弹性盒子布局</h2><ol>\n<li>Grid 布局<br>Grid 布局是一种基于网格的二维布局系统，可以同时处理行和列。它特别适合复杂的布局，允许我们精确控制各个元素在网格中的位置。</li>\n<li>Flexbox 布局<br>Flexbox 布局是一种基于弹性盒子的布局模型，适用于一维布局，可以在行或列方向上对元素进行排列和对齐。它特别适合那些需要灵活、响应式布局的场景。</li>\n</ol>\n<h2 id=\"如何实现单行／多行文本溢出的省略样式？\"><a href=\"#如何实现单行／多行文本溢出的省略样式？\" class=\"headerlink\" title=\". 如何实现单行／多行文本溢出的省略样式？\"></a>. 如何实现单行／多行文本溢出的省略样式？</h2><ol>\n<li><p>单行文本溢出省略</p>\n<ol>\n<li>overflow:hidden 隐藏溢出元素</li>\n<li>white-space:nowrap 文本不换行</li>\n<li>text-overflow 属性：<br>clip：当对象内文本溢出部分裁切掉<br>ellipsis：当对象内文本溢出时显示省略标记（…）</li>\n</ol>\n</li>\n<li><p>多行文本溢出省略<br> 基于高度截断 #伪元素 + 定位</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"> <span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">     <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.demo</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">content</span>: <span class=\"string\">&quot;...&quot;</span>;</span><br><span class=\"line\">     <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">     <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<body>\n    <div class='demo'>这是一段很长的文本</div>\n</body>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">   基于行数截断</span><br><span class=\"line\">   ```css</span><br><span class=\"line\">   &lt;style&gt;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\">        width: 400px;</span><br><span class=\"line\">        border-radius: 1px solid red;</span><br><span class=\"line\">        -webkit-line-clamp: 2;</span><br><span class=\"line\">        display: -webkit-box;</span><br><span class=\"line\">        -webkit-box-orient: vertical;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        text-overflow: ellipsis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</span><br><span class=\"line\">    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</span><br><span class=\"line\">&lt;/p &gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-如何画一个三角形？原理是什么？\"><a href=\"#CSS-如何画一个三角形？原理是什么？\" class=\"headerlink\" title=\". CSS 如何画一个三角形？原理是什么？\"></a>. CSS 如何画一个三角形？原理是什么？</h2><p>利用边框的特性。通过设置元素的宽度和高度为零，并且为不同边设置不同颜色的边框，可以创建各种方向的三角形。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">0</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: transparent transparent <span class=\"number\">#d9534f</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>空心三角形</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">0</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: transparent transparent <span class=\"number\">#d9534f</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.border</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">0</span> <span class=\"number\">40px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: transparent transparent <span class=\"number\">#96ceb4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"让-Chrome-支持小于-12px-的文字方式有哪些？区别？\"><a href=\"#让-Chrome-支持小于-12px-的文字方式有哪些？区别？\" class=\"headerlink\" title=\". 让 Chrome 支持小于 12px 的文字方式有哪些？区别？\"></a>. 让 Chrome 支持小于 12px 的文字方式有哪些？区别？</h2><ol>\n<li>zoom<br>zoom:50%，表示缩小到原来的一半<br>zoom:0.5，表示缩小到原来的一半</li>\n<li>-webkit-transform:scale()</li>\n<li>-webkit-text-size-adjust:none 谷歌浏览器有版本要求</li>\n</ol>\n<h2 id=\"说说对-Css-预编语言的理解？有哪些区别\"><a href=\"#说说对-Css-预编语言的理解？有哪些区别\" class=\"headerlink\" title=\". 说说对 Css 预编语言的理解？有哪些区别?\"></a>. 说说对 Css 预编语言的理解？有哪些区别?</h2><p>CSS 预编译语言通过添加变量、嵌套规则、混入（mixins）、函数和继承等功能，简化了 CSS 的编写和管理。经过编译器转换成标准的 CSS 代码，然后渲染。</p>\n<ol>\n<li>sass</li>\n<li>less</li>\n<li>stylus</li>\n</ol>\n<p>主要区别</p>\n<ol>\n<li>语法不同：<br>Stylus 支持无括号和无分号的极简语法。</li>\n<li>变量表示不同：<br>Sass 使用 $ 符号定义变量。<br>LESS 使用 @ 符号定义变量。<br>Stylus 直接定义变量。</li>\n<li>函数和混入：<br>Sass 和 Stylus 支持复杂的函数和混入。<br>LESS 的混入相对简单，但也提供基本功能。</li>\n</ol>\n<h2 id=\"什么是响应式设计？响应式设计的基本原理是什么？如何做？\"><a href=\"#什么是响应式设计？响应式设计的基本原理是什么？如何做？\" class=\"headerlink\" title=\". 什么是响应式设计？响应式设计的基本原理是什么？如何做？\"></a>. 什么是响应式设计？响应式设计的基本原理是什么？如何做？</h2><p>响应式设计是一种网页设计理念，通过动态调整布局和内容来适应不同的屏幕尺寸和设备特性。</p>\n<ol>\n<li>流式布局：使用相对单位来定义布局的宽度和元素的尺寸，而不是固定的像素值。</li>\n<li>媒体查询：使用 CSS 媒体查询来应用不同的样式规则，针对不同的设备特性进行调整。</li>\n<li>弹性网格：使用弹性网格系统来创建布局，这种布局根据设备的屏幕尺寸自动调整。</li>\n<li>选择断点，针对不同断点实现不同布局和内容展示。</li>\n</ol>\n<h2 id=\"元素水平垂直居中的方法有哪些？如果元素不定宽高是否可以呢？\"><a href=\"#元素水平垂直居中的方法有哪些？如果元素不定宽高是否可以呢？\" class=\"headerlink\" title=\". 元素水平垂直居中的方法有哪些？如果元素不定宽高是否可以呢？\"></a>. 元素水平垂直居中的方法有哪些？如果元素不定宽高是否可以呢？</h2><p>利用定位+margin:auto 可以<br>利用定位+margin:负值<br>利用定位+transform 可以<br>table 布局<br>flex 布局 可以<br>grid 布局 可以</p>\n<h2 id=\"谈谈你对-BFC-的理解？\"><a href=\"#谈谈你对-BFC-的理解？\" class=\"headerlink\" title=\". 谈谈你对 BFC 的理解？\"></a>. 谈谈你对 BFC 的理解？</h2><p>一个块级格式化上下文(作用域)，它在布局过程中形成一个独立的区域，用于控制块级元素的排版和浮动行为。内部子元素不会影响外部元素<br>BFC 的作用：<br>防止元素重叠：BFC 可以解决浮动元素之间的重叠问题。<br>处理外边距折叠：(margin 重叠)两个相邻块级元素之间的垂直外边距合并成一个外边距的现象<br>清除浮动: 子元素是浮动的，父元素的高度可能会被压缩</p>\n<h2 id=\"如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？\"><a href=\"#如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？\" class=\"headerlink\" title=\". 如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？\"></a>. 如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？</h2><p>两栏布局，右侧自适应：可以使用 Flexbox、Grid 或传统的浮动布局实现。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/* 启用 Flexbox 布局 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"comment\">/* 左侧固定宽度 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; <span class=\"comment\">/* 右侧自适应剩余空间 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">200px</span> <span class=\"number\">1</span>fr; <span class=\"comment\">/* 左侧固定宽度，右侧自适应 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 清除浮动 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"comment\">/* 左侧固定宽度 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>; <span class=\"comment\">/* 右侧从左侧宽度起始 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三栏布局，中间自适应：可以使用 Flexbox、Grid 或传统的浮动布局实现。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/* 启用 Flexbox 布局 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"comment\">/* 左右两侧固定宽度 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>; <span class=\"comment\">/* 中间栏自适应剩余空间 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">150px</span> <span class=\"number\">1</span>fr <span class=\"number\">150px</span>; <span class=\"comment\">/* 左右固定宽度，中间自适应 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">/* 清除浮动 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>; <span class=\"comment\">/* 左右两侧固定宽度 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">150px</span>; <span class=\"comment\">/* 从左侧栏宽度开始 */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">150px</span>; <span class=\"comment\">/* 到右侧栏宽度结束 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right; <span class=\"comment\">/* 右侧栏浮动到右边 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["面试","Css"],"tags":[]},{"title":"ES6","url":"https://landaye.github.io/2024/07/30/ES6/","content":"<h1 id=\"文章内容\"><a href=\"#文章内容\" class=\"headerlink\" title=\"文章内容\"></a>文章内容</h1><hr>\n<h2 id=\"你是怎么理解-ES6-中-Promise-的？使用场景？\"><a href=\"#你是怎么理解-ES6-中-Promise-的？使用场景？\" class=\"headerlink\" title=\". 你是怎么理解 ES6 中 Promise 的？使用场景？\"></a>. 你是怎么理解 ES6 中 Promise 的？使用场景？</h2><p>Promise 是异步编程的一种解决方案,有三种状态</p>\n<ol>\n<li>pending（进行中）</li>\n<li>fulfilled（已成功）</li>\n<li>rejected（已失败）<br>Promise 对象是一个构造函数，生成 Promise 实例,实例存在以下方法：</li>\n<li>then()</li>\n<li>catch()</li>\n<li>finally()</li>\n</ol>\n<p>当下个异步请求依赖上个请求结果时，Promise 的链式操作就很友好。</p>\n<h2 id=\"异步解决方案\"><a href=\"#异步解决方案\" class=\"headerlink\" title=\". 异步解决方案\"></a>. 异步解决方案</h2><ol>\n<li>回调函数</li>\n<li>Promise 对象</li>\n<li>generator 函数</li>\n<li>async&#x2F;await</li>\n</ol>\n<h2 id=\"Vue3-0-里为什么要用-Proxy-API-替代-defineProperty-API-？\"><a href=\"#Vue3-0-里为什么要用-Proxy-API-替代-defineProperty-API-？\" class=\"headerlink\" title=\". Vue3.0 里为什么要用 Proxy API 替代 defineProperty API ？\"></a>. Vue3.0 里为什么要用 Proxy API 替代 defineProperty API ？</h2><p>为了解决 defineProperty API</p>\n<ol>\n<li>检测不到对象属性的添加和删除</li>\n<li>数组 API 方法无法监听到</li>\n<li>需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</li>\n</ol>\n<h2 id=\"对象新增了哪些扩展？\"><a href=\"#对象新增了哪些扩展？\" class=\"headerlink\" title=\". 对象新增了哪些扩展？\"></a>. 对象新增了哪些扩展？</h2><ol>\n<li>属性的简写 键名与对应值名相等可以简写</li>\n<li>属性名表达式</li>\n<li>super 关键字</li>\n<li>扩展运算符的应用</li>\n<li>对象新增的方法<br>Object.is()<br>Object.assign()<br>Object.getOwnPropertyDescriptors()<br>Object.setPrototypeOf()，Object.getPrototypeOf()<br>Object.keys()，Object.values()，Object.entries()<br>Object.fromEntries()<br>#Object.is()</li>\n</ol>\n","categories":["面试","ES6"],"tags":[]},{"title":"React","url":"https://landaye.github.io/2024/07/30/React/","content":"<h1 id=\"文章内容\"><a href=\"#文章内容\" class=\"headerlink\" title=\"文章内容\"></a>文章内容</h1><hr>\n<h2 id=\"说说对-React-的理解？有哪些特性？\"><a href=\"#说说对-React-的理解？有哪些特性？\" class=\"headerlink\" title=\". 说说对 React 的理解？有哪些特性？\"></a>. 说说对 React 的理解？有哪些特性？</h2><ol>\n<li><p>用于构建用户界面的 JavaScript 库,虚拟 DOM 来有效地操作 DOM，遵循从高阶组件到低阶组件的单向数据流.</p>\n</li>\n<li><p>特性</p>\n<ol>\n<li>JSX 语法</li>\n<li>单向数据绑定</li>\n<li>虚拟 DOM</li>\n<li>声明式编程</li>\n<li>Component</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"说说-Real-DOM-和-Virtual-DOM-的区别？优缺点？\"><a href=\"#说说-Real-DOM-和-Virtual-DOM-的区别？优缺点？\" class=\"headerlink\" title=\". 说说 Real DOM 和 Virtual DOM 的区别？优缺点？\"></a>. 说说 Real DOM 和 Virtual DOM 的区别？优缺点？</h2><ol>\n<li>Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述</li>\n<li>区别:<br>虚拟 DOM 不会进行排版与重绘操作,而真实 DOM 会频繁重排与重绘</li>\n</ol>\n<h2 id=\"说说-React-生命周期有哪些不同阶段？每个阶段对应的方法是？\"><a href=\"#说说-React-生命周期有哪些不同阶段？每个阶段对应的方法是？\" class=\"headerlink\" title=\". 说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？\"></a>. 说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？</h2>","categories":["面试","React"],"tags":[]},{"title":"JavaScript","url":"https://landaye.github.io/2024/07/30/JavaScript/","content":"<h1 id=\"文章内容\"><a href=\"#文章内容\" class=\"headerlink\" title=\"文章内容\"></a>文章内容</h1><hr>\n<p>JavaScript 是一种多范式的动态语言，它包含类型、运算符、标准内置（built-in）对象和方法。</p>\n<h2 id=\"说说-JavaScript-中的数据类型？存储上的差别？\"><a href=\"#说说-JavaScript-中的数据类型？存储上的差别？\" class=\"headerlink\" title=\". 说说 JavaScript 中的数据类型？存储上的差别？\"></a>. 说说 JavaScript 中的数据类型？存储上的差别？</h2><p>在<code>JavaScript</code>中，我们可以分成两种类型：</p>\n<ol>\n<li>基本类型 存储在栈中<ol>\n<li>String</li>\n<li>Boolean</li>\n<li>Undefined</li>\n<li>null</li>\n<li>symbol</li>\n</ol>\n</li>\n<li>复杂类型 存储于堆中<ol>\n<li>Object</li>\n<li>Array</li>\n<li>Function</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"深拷贝浅拷贝的区别？如何实现一个深拷贝？\"><a href=\"#深拷贝浅拷贝的区别？如何实现一个深拷贝？\" class=\"headerlink\" title=\". 深拷贝浅拷贝的区别？如何实现一个深拷贝？\"></a>. 深拷贝浅拷贝的区别？如何实现一个深拷贝？</h2><ol>\n<li>浅拷贝</li>\n</ol>\n<p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址（只拷贝栈内存内的）</p>\n<p>Object.assign<br>Array.prototype.slice(), Array.prototype.concat()<br>使用拓展运算符实现的复制、</p>\n<ol>\n<li>深拷贝<br>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</li>\n</ol>\n<p>_.cloneDeep()<br>jQuery.extend()<br>JSON.stringify()<br>手写循环递归</p>\n<h2 id=\"说说你对闭包的理解？闭包使用场景？\"><a href=\"#说说你对闭包的理解？闭包使用场景？\" class=\"headerlink\" title=\". 说说你对闭包的理解？闭包使用场景？\"></a>. 说说你对闭包的理解？闭包使用场景？</h2><ol>\n<li><p>定义在一个函数内部的函数，内部函数持有外部函数内变量的引用。<br>优点是可以避免变量的污染<br>缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。</p>\n</li>\n<li><p>使用场景：<br>创建私有变量<br>延长变量的生命周期</p>\n</li>\n</ol>\n<h2 id=\"柯里化函数\"><a href=\"#柯里化函数\" class=\"headerlink\" title=\". 柯里化函数\"></a>. 柯里化函数</h2><p>柯里化是函数式编程中的重要概念，通过将多参数函数转换为一系列单参数函数，使得代码更灵活、更易复用。它可以用于函数复用、延迟计算和函数配置等场景。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">width</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">height</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width * height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getTenWidthArea = <span class=\"title function_\">getArea</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> area1 = <span class=\"title function_\">getTenWidthArea</span>(<span class=\"number\">20</span>); <span class=\"comment\">// 200</span></span><br><span class=\"line\"><span class=\"comment\">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getTwentyWidthArea = <span class=\"title function_\">getArea</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> area2 = <span class=\"title function_\">getTwentyWidthArea</span>(<span class=\"number\">15</span>); <span class=\"comment\">// 300</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说说你对作用域链的理解？\"><a href=\"#说说你对作用域链的理解？\" class=\"headerlink\" title=\". 说说你对作用域链的理解？\"></a>. 说说你对作用域链的理解？</h2><p>在Javascript中使用一个变量的时候，首先Javascript引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域</p>\n<ol>\n<li><p>全局作用域<br>任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问</p>\n</li>\n<li><p>函数作用域<br>函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问</p>\n</li>\n<li><p>块级作用域<br>ES6引入了let和const关键字,和var关键字不同，在大括号中使用let和const声明的变量存在于块级作用域中。在大括号之外不能访问这些变量</p>\n</li>\n</ol>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\". 变量提升\"></a>. 变量提升</h2><p>变量提升是JavaScript引擎把变量的声明部分和函数的声明部分提升到代码开头的行为。变量被提升后，会给变量设置默认值为 undefined。<br>let 和 const 声明的变量也会被提升，但在声明之前访问它们会导致 ReferenceError。<br>函数提升：函数声明会被提升到作用域顶部，而函数表达式不会被提升。</p>\n<h2 id=\"JavaScript原型，原型链-有什么特点？\"><a href=\"#JavaScript原型，原型链-有什么特点？\" class=\"headerlink\" title=\". JavaScript原型，原型链 ? 有什么特点？\"></a>. JavaScript原型，原型链 ? 有什么特点？</h2><ol>\n<li><p>原型<br>每个对象都会在其内部初始化一个属性，就是prototype（原型）。<br><strong>proto</strong> 是每个对象（包括实例对象和函数对象）都有的一个属性，它指向该对象的原型。<br>prototype 是函数对象（包括构造函数）的一个属性，它用于创建实例对象的原型。</p>\n</li>\n<li><p>原型链<br>引用类型皆对象，每个对象都有原型，原型也是对象，也有它自己的原型，一层一层，组成原型链。原型链存在的意义就是继承：访问对象属性时，在对象本身找不到，就在原型链上一层一层找。</p>\n</li>\n<li><p>继承存在的意义就是属性共享：好处有二：一是代码重用，字面意思；二是可扩展，不同对象可能继承相同的属性，也可以定义只属于自己的属性</p>\n</li>\n</ol>\n<h2 id=\"Javascript如何实现继承？\"><a href=\"#Javascript如何实现继承？\" class=\"headerlink\" title=\". Javascript如何实现继承？\"></a>. Javascript如何实现继承？</h2><ol>\n<li>原型链继承</li>\n<li>构造函数继承（借助 call）</li>\n<li>组合继承</li>\n<li>原型式继承</li>\n<li>寄生式继承</li>\n<li>寄生组合式继承</li>\n</ol>\n<h2 id=\"JavaScript中执行上下文和执行栈是什么？\"><a href=\"#JavaScript中执行上下文和执行栈是什么？\" class=\"headerlink\" title=\". JavaScript中执行上下文和执行栈是什么？\"></a>. JavaScript中执行上下文和执行栈是什么？</h2><p>执行上下文是一种对Javascript代码执行环境的抽象概念. </p>\n<p>执行上下文的类型分为三种：</p>\n<ol>\n<li>全局执行上下文：只有一个，浏览器中的全局对象就是 window对象，this 指向这个全局对象</li>\n<li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文</li>\n<li>Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用</li>\n</ol>\n<p>执行栈</p>\n<p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文</p>\n<h2 id=\"说说JavaScript中的事件模型\"><a href=\"#说说JavaScript中的事件模型\" class=\"headerlink\" title=\". 说说JavaScript中的事件模型\"></a>. 说说JavaScript中的事件模型</h2><ol>\n<li>事件 是用户或浏览器执行的某种动作，可以通过事件监听器进行监听。</li>\n<li>事件流 描述事件在页面元素之间的传播方式。<br>事件流三个阶段：<br>  事件捕获阶段(capture phase)<br>  处于目标阶段(target phase)<br>  事件冒泡阶段(bubbling phase)</li>\n<li>事件委托 是将事件监听器添加到父级元素，通过事件冒泡处理子元素事件的技术。</li>\n<li>事件对象 包含关于事件的详细信息，可在事件处理函数中使用。</li>\n</ol>\n<p>事件模型</p>\n<p>事件模型可以分为三种：</p>\n<p>原始事件模型（DOM0级） 不支持事件捕获</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;.btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = fun;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>标准事件模型（DOM2级） 捕获、目标和冒泡</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;.btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(‘click’, showMessage, <span class=\"literal\">false</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">removeEventListener</span>(‘click’, showMessage, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>IE事件模型（基本不用） 不支持事件捕获</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;.btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">attachEvent</span>(‘onclick’, showMessage);</span><br><span class=\"line\">btn.<span class=\"title function_\">detachEvent</span>(‘onclick’, showMessage);</span><br></pre></td></tr></table></figure>\n<h2 id=\"typeof-与-instanceof-区别\"><a href=\"#typeof-与-instanceof-区别\" class=\"headerlink\" title=\". typeof 与 instanceof 区别\"></a>. typeof 与 instanceof 区别</h2><ol>\n<li>typeof会返回一个变量的基本类型，instanceof返回的是一个布尔值</li>\n<li>instanceof 可判断复杂引用数据类型，不能判断基础数据类型</li>\n<li>而typeof 也存在弊端，可以判断基础数据类型（null 除外），引用数据类型中，除了function 类型，其他的也无法判断</li>\n</ol>\n<p>如果需要通用检测数据类型，可以采用Object.prototype.toString(xxx)，调用该方法，统一返回格式“[object Xxx]”的字符串</p>\n<h2 id=\"解释下什么是事件代理-事件委托-？应用场景？\"><a href=\"#解释下什么是事件代理-事件委托-？应用场景？\" class=\"headerlink\" title=\". 解释下什么是事件代理(事件委托)？应用场景？\"></a>. 解释下什么是事件代理(事件委托)？应用场景？</h2><p>  将事件监听器添加到父级元素，通过事件冒泡处理子元素事件的技术。</p>\n<h2 id=\"说说new操作符具体干了什么？\"><a href=\"#说说new操作符具体干了什么？\" class=\"headerlink\" title=\". 说说new操作符具体干了什么？\"></a>. 说说new操作符具体干了什么？</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mynew</span>(<span class=\"params\">Func, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建一个新对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.新对象原型指向构造函数原型对象</span></span><br><span class=\"line\">    obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Func</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">    <span class=\"comment\">// 3.将构建函数的this指向新对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"title class_\">Func</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">    <span class=\"comment\">// 4.根据构造函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> ? result : obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind、call、apply-区别？如何实现一个bind\"><a href=\"#bind、call、apply-区别？如何实现一个bind\" class=\"headerlink\" title=\". bind、call、apply 区别？如何实现一个bind?\"></a>. bind、call、apply 区别？如何实现一个bind?</h2><p>call、apply、bind作用是改变函数执行时的上下文，简而言之就是改变函数运行时的this指向</p>\n<ol>\n<li>三者都可以改变函数的this对象指向</li>\n<li>三者第一个参数都是this要指向的对象，如果没有这个参数或参数为undefined或null，则默认指向全局window</li>\n<li>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入</li>\n<li>bind是返回绑定this之后的函数，apply、call 则是立即执行</li>\n</ol>\n<h2 id=\"说说你对事件循环的理解\"><a href=\"#说说你对事件循环的理解\" class=\"headerlink\" title=\". 说说你对事件循环的理解\"></a>. 说说你对事件循环的理解</h2><ol>\n<li><p>微任务<br>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前<br>常见的微任务有：<br>Promise.then<br>MutaionObserver<br>Object.observe（已废弃；Proxy 对象替代）<br>process.nextTick（Node.js）</p>\n</li>\n<li><p>宏任务<br>常见的宏任务有：<br>script (可以理解为外层同步代码)<br>setTimeout&#x2F;setInterval<br>UI rendering&#x2F;UI事件<br>postMessage、MessageChannel<br>setImmediate、I&#x2F;O（Node.js）</p>\n</li>\n<li><p>事件循环的执行顺序</p>\n<ol>\n<li>执行全局代码（整体代码作为一个宏任务执行）。</li>\n<li>遇到异步任务时，将其放入对应的任务队列。</li>\n<li>当前宏任务执行完成后，检查并执行所有微任务队列中的任务，直到微任务队列为空。</li>\n<li>执行下一个宏任务（从宏任务队列中取出一个任务并执行）。</li>\n<li>重复上述过程。</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;new Promise&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遇到 console.log(1) ，直接打印 1</span></span><br><span class=\"line\"><span class=\"comment\">// 遇到定时器，属于新的宏任务，留着后面执行</span></span><br><span class=\"line\"><span class=\"comment\">// 遇到 new Promise，这个是直接执行的，打印 &#x27;new Promise&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// .then 属于微任务，放入微任务队列，后面再执行</span></span><br><span class=\"line\"><span class=\"comment\">// 遇到 console.log(3) 直接打印 3</span></span><br><span class=\"line\"><span class=\"comment\">// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 &#x27;then&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"说说你对BOM的理解，常见的BOM对象你了解哪些？\"><a href=\"#说说你对BOM的理解，常见的BOM对象你了解哪些？\" class=\"headerlink\" title=\". 说说你对BOM的理解，常见的BOM对象你了解哪些？\"></a>. 说说你对BOM的理解，常见的BOM对象你了解哪些？</h2><p>BOM (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象<br>其作用就是跟浏览器做一些交互效果.</p>\n<ol>\n<li>window 对象</li>\n<li>location 对象</li>\n<li>history 对象</li>\n<li>navigator 对象</li>\n<li>screen 对象</li>\n<li>Document 对象</li>\n</ol>\n<h2 id=\"举例说明你对尾递归的理解，有哪些应用场景\"><a href=\"#举例说明你对尾递归的理解，有哪些应用场景\" class=\"headerlink\" title=\". 举例说明你对尾递归的理解，有哪些应用场景\"></a>. 举例说明你对尾递归的理解，有哪些应用场景</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">n, total</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">factorial</span>(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">factorial</span>(<span class=\"number\">5</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>数组求和</li>\n<li>求斐波那契数列</li>\n<li>数组扁平化  数组扁平化是将多维数组转换为一维数组的过程.<ol>\n<li>Array.prototype.flat()</li>\n<li>Array.prototype.reduce()</li>\n</ol>\n</li>\n<li>数组对象格式化</li>\n</ol>\n<h2 id=\"Javascript本地存储的方式有哪些？区别及应用场景？\"><a href=\"#Javascript本地存储的方式有哪些？区别及应用场景？\" class=\"headerlink\" title=\". Javascript本地存储的方式有哪些？区别及应用场景？\"></a>. Javascript本地存储的方式有哪些？区别及应用场景？</h2><ol>\n<li>标记用户与跟踪用户行为的情况，推荐使用cookie 4kb</li>\n<li>适合长期保存在本地的数据（令牌），推荐使用localStorage 5m</li>\n<li>敏感账号一次性登录，推荐使用sessionStorage 5m</li>\n<li>存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用indexedDB</li>\n</ol>\n<h2 id=\"说说你对函数式编程的理解？优缺点？\"><a href=\"#说说你对函数式编程的理解？优缺点？\" class=\"headerlink\" title=\". 说说你对函数式编程的理解？优缺点？\"></a>. 说说你对函数式编程的理解？优缺点？</h2><p>函数式编程是一种”编程范式”（programming paradigm）<br>主要的编程范式有三种：命令式编程，声明式编程和函数式编程.</p>\n<p>函数式编程更加强调程序执行的结果而非执行的过程.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命令式编程</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    array[i] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(array[i], <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数式方式</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(num, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Javascript中如何实现函数缓存？函数缓存有哪些应用场景？\"><a href=\"#Javascript中如何实现函数缓存？函数缓存有哪些应用场景？\" class=\"headerlink\" title=\". Javascript中如何实现函数缓存？函数缓存有哪些应用场景？\"></a>. Javascript中如何实现函数缓存？函数缓存有哪些应用场景？</h2><ol>\n<li>闭包</li>\n<li>柯里化</li>\n<li>高阶函数<br>   用于计算耗时、可能重复利用多次，且是纯函数的<br>纯函数：<br>对于相同的输入永远会得到相同的输出，而且没有任何可观察的副作用</li>\n</ol>\n<h2 id=\"什么是防抖和节流？有什么区别？如何实现？\"><a href=\"#什么是防抖和节流？有什么区别？如何实现？\" class=\"headerlink\" title=\". 什么是防抖和节流？有什么区别？如何实现？\"></a>. 什么是防抖和节流？有什么区别？如何实现？</h2><ol>\n<li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled2</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>; <span class=\"comment\">// 保存this指向</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>; <span class=\"comment\">// 拿到event对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout)</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"谈谈-JavaScript-中的类型转换机制\"><a href=\"#谈谈-JavaScript-中的类型转换机制\" class=\"headerlink\" title=\". 谈谈 JavaScript 中的类型转换机制\"></a>. 谈谈 JavaScript 中的类型转换机制</h2><ol>\n<li>强制转换（显示转换）<br>Number()<br>parseInt()<br>String()<br>Boolean()</li>\n<li>自动转换（隐式转换）<br>  比较运算（&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;）、if、while需要布尔值地方<br>  算术运算（+、-、*、&#x2F;、%）</li>\n</ol>\n<h2 id=\"说说-JavaScript-中内存泄漏的几种情况？\"><a href=\"#说说-JavaScript-中内存泄漏的几种情况？\" class=\"headerlink\" title=\". 说说 JavaScript 中内存泄漏的几种情况？\"></a>. 说说 JavaScript 中内存泄漏的几种情况？</h2><p>不再需要的内存没有被及时释放</p>\n<ol>\n<li>全局变量泄漏</li>\n<li>闭包中的内存泄漏</li>\n<li>遗留的 DOM 引用</li>\n<li>未清理的定时器和回调</li>\n<li>事件监听器泄漏</li>\n</ol>\n<h2 id=\"说说-Javascript-数字精度丢失的问题，如何解决？\"><a href=\"#说说-Javascript-数字精度丢失的问题，如何解决？\" class=\"headerlink\" title=\". 说说 Javascript 数字精度丢失的问题，如何解决？\"></a>. 说说 Javascript 数字精度丢失的问题，如何解决？</h2><ol>\n<li>使用整数运算</li>\n<li>使用 Math.round()</li>\n<li>使用库</li>\n</ol>\n<h2 id=\"如何判断一个元素是否在可视区域中？\"><a href=\"#如何判断一个元素是否在可视区域中？\" class=\"headerlink\" title=\". 如何判断一个元素是否在可视区域中？\"></a>. 如何判断一个元素是否在可视区域中？</h2><ol>\n<li>offsetTop、scrollTop</li>\n<li>getBoundingClientRect</li>\n<li>Intersection Observer</li>\n</ol>\n<h2 id=\"大文件上传如何做断点续传？\"><a href=\"#大文件上传如何做断点续传？\" class=\"headerlink\" title=\". 大文件上传如何做断点续传？\"></a>. 大文件上传如何做断点续传？</h2><ol>\n<li><p>分片上传<br>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块来进行分片上传</p>\n</li>\n<li><p>断点续传<br>断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分每一个部分采用一个线程进行上传或下载</p>\n</li>\n</ol>\n<h2 id=\"什么是单点登录？如何实现？\"><a href=\"#什么是单点登录？如何实现？\" class=\"headerlink\" title=\". 什么是单点登录？如何实现？\"></a>. 什么是单点登录？如何实现？</h2><p>SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过passport，子系统本身将不参与登录操作</p>\n","categories":["面试","JavaScript"],"tags":[]},{"title":"Algorithm","url":"https://landaye.github.io/2024/07/30/Algorithm/","content":"<h1 id=\"文章内容\"><a href=\"#文章内容\" class=\"headerlink\" title=\"文章内容\"></a>文章内容</h1><hr>\n<h2 id=\"9X9数独\"><a href=\"#9X9数独\" class=\"headerlink\" title=\"9X9数独\"></a>9X9数独</h2><div class=\"iframe\">\n  <iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"Untitled\" src=\"https://codepen.io/LanDaye/embed/eYwgxKQ?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/LanDaye/pen/eYwgxKQ\">\n  Untitled</a> by . (<a href=\"https://codepen.io/LanDaye\">@LanDaye</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n  <p>点击 <a href=\"https://codepen.io/LanDaye/pen/eYwgxKQ\" target=\"_blank\">这里</a> 编辑和查看完整代码。</p>\n</div>\n","categories":["Algorithm"],"tags":[]},{"title":"关于","url":"https://landaye.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"五湖四海皆是朋友!","url":"https://landaye.github.io/friends/index.html","content":"<p><a href=\"mailto:a2219816262@163.com\" class=\"email-link\">Contact Me</a></p>\n","categories":[],"tags":[]},{"title":"categories","url":"https://landaye.github.io/categories/index.html","content":"","categories":[],"tags":[]},{"title":"安居","url":"https://landaye.github.io/projects/anju.html","content":"","categories":[],"tags":[]},{"title":"项目","url":"https://landaye.github.io/projects/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://landaye.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"阿星商城","url":"https://landaye.github.io/projects/axing.html","content":"","categories":[],"tags":[]}]